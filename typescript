Script started on Mon 19 Mar 2018 04:53:44 PM CDT
[4makka[24m:[1m~/cs1521/labs/lab5[0m% pwd
/home/csugrads/brans109/cs1521/labs/lab5
[4makka[24m:[1m~/cs1521/labs/lab5[0m% ls -l
total 96
drwx------ 3 brans109 student 4096 Mar 19 16:52 build
-rw------- 1 brans109 student  188 Mar 17 12:14 CMakeLists.txt
-rw------- 1 brans109 student  173 Mar 17 12:13 CMakeLists.txt~
-rw------- 1 brans109 student  466 Mar 19 16:37 isPalindrome.cpp
-rw------- 1 brans109 student  549 Mar 19 16:24 isPalindrome.cpp~
-rw------- 1 brans109 student  113 Mar 15 09:31 isPalindrome.h
-rw------- 1 brans109 student 2145 Mar 19 15:22 LinkedQueue.cpp
-rw------- 1 brans109 student 2120 Mar 19 15:12 LinkedQueue.cpp~
-rw------- 1 brans109 student 1015 Mar 19 15:21 LinkedQueue.h
-rw------- 1 brans109 student 1015 Mar 19 15:06 LinkedQueue.h~
-rw------- 1 brans109 student 2305 Mar 19 16:30 LinkedStack.cpp
-rw------- 1 brans109 student 2316 Mar 19 16:00 LinkedStack.cpp~
-rw------- 1 brans109 student 1018 Mar 19 15:42 LinkedStack.h
-rw------- 1 brans109 student 1007 Mar 19 15:25 LinkedStack.h~
-rw------- 1 brans109 student 1218 Mar 15 09:31 main.cpp
-rw------- 1 brans109 student 1226 Mar 15 09:34 Node.cpp
-rw------- 1 brans109 student 1789 Mar 15 09:34 Node.h
-rw------- 1 brans109 student  876 Mar 18 01:28 OldNode.cpp
-rw------- 1 brans109 student  762 Mar 18 01:27 OldNode.h
-rw------- 1 brans109 student  492 Mar 15 09:45 PrecondViolatedExcep.cpp
-rw------- 1 brans109 student  758 Mar 15 09:44 PrecondViolatedExcep.h
-rw------- 1 brans109 student 1552 Mar 16 12:07 QueueInterface.h
drwx------ 2 brans109 student 4096 Mar 15 09:31 src
-rw------- 1 brans109 student 1495 Mar 15 09:47 StackInterface.h
-rw------- 1 brans109 student    0 Mar 19 16:53 typescript
[4makka[24m:[1m~/cs1521/labs/lab5[0m% cat -n CM
CMakeLists.txt~  CMakeLists.txt   
[4makka[24m:[1m~/cs1521/labs/lab5[0m% cat -n CMakeLists.txt
     1	project(lab5)
     2	
     3	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++14")
     4	
     5	add_executable(lab5
     6	  main.cpp
     7	  LinkedStack.h
     8	  LinkedQueue.h
     9	  isPalindrome.cpp
    10	  PrecondViolatedExcep.cpp
    11	  )
[4makka[24m:[1m~/cs1521/labs/lab5[0m% cat -n CMakeLists.txt[K[K[K[K[K[K[K[K[K[K[K[K[K[KLinkedStack.h
     1	/** @file
     2	 *
     3	 *  @course CS1521
     4	 *  @section 1
     5	 *
     6	 *  Header file for a pointer-based implementation of the ADT stack.
     7	 *
     8	 *  Adapted from page 246, 250 in Carrano 7e.
     9	 *
    10	 *  @author Frank M. Carrano
    11	 *  @author Timothy Henry
    12	 *  @author Steve Holtz
    13	 *
    14	 *  @date 7 Feb 2018
    15	 *
    16	 *  @version 7.0 */
    17	
    18	#ifndef LINKED_STACK_
    19	#define LINKED_STACK_
    20	
    21	#include "StackInterface.h"
    22	#include "Node.h"
    23	
    24	/** @class LinkedStack LinkedStack.h "LinkedStack.h"
    25	 *
    26	 *  Specification of a pointer-based ADT stack. */
    27	template <typename ItemType>
    28	class LinkedStack : public StackInterface<ItemType> {
    29	 private:
    30	  using NodePtr = shared_ptr<Node<ItemType>>;
    31	
    32	  NodePtr topPtr = nullptr;
    33	
    34	 public:
    35	  LinkedStack() = default;
    36	
    37	  LinkedStack(const LinkedStack<ItemType>& aStack);
    38	
    39	  virtual ~LinkedStack();
    40	
    41	  virtual bool isEmpty() const;
    42	
    43	  virtual bool push(const ItemType& newEntry);
    44	
    45	  virtual bool pop();
    46	
    47	  virtual ItemType peek() const; // throw(PrecondViolatedExcep);
    48	  // Delete throw clauses.
    49	};
    50	
    51	#include "LinkedStack.cpp"
    52	
    53	#endif
[4makka[24m:[1m~/cs1521/labs/lab5[0m% cat -n LinkedStack.h[Kcpp
     1	/** @file
     2	 *
     3	 *  @course CS1521
     4	 *  @section 1
     5	 *
     6	 *  Implementation file for a pointer-based implementation of the ADT
     7	 *  stack.
     8	 *
     9	 *  Adapted from pages 246-248, 250 in Carrano 7e.
    10	 *
    11	 *  @author Frank M. Carrano
    12	 *  @author Timothy Henry
    13	 *  @author Steve Holtz
    14	 *
    15	 *  @date 7 Feb 2018
    16	 *
    17	 *  @version 7.0 */
    18	
    19	#include <new>
    20	#include <string>
    21	
    22	//#include "LinkedStack.h"
    23	#include "PrecondViolatedExcep.h"
    24	
    25	template <typename ItemType>
    26	LinkedStack<ItemType>::LinkedStack(const LinkedStack<ItemType>& aStack) {
    27	
    28	  if (!aStack.topPtr) {
    29	    topPtr = nullptr;
    30	  }
    31	  else {
    32	    auto origStackPtr(aStack.topPtr);
    33	
    34	    try {
    35	      topPtr = std::make_shared<Node<ItemType>>(origStackPtr->getItem() );      
    36		//new Node<ItemType>(origStackPtr->getItem() );
    37	
    38	      auto newChainPtr(topPtr);
    39	
    40	      origStackPtr = origStackPtr->getNext();
    41	
    42	      while (origStackPtr) {
    43		newChainPtr->setNext(
    44				     std::make_shared<Node<ItemType>>(origStackPtr->getItem())
    45				     //new Node<ItemType>(origStackPtr->getItem())
    46				     );
    47	
    48		newChainPtr = newChainPtr->getNext();
    49		origStackPtr = origStackPtr->getNext();
    50	      }
    51	    }
    52	    catch (const std::bad_alloc&) {
    53	      while (!isEmpty() ) {
    54		pop();
    55	      }
    56	      throw;
    57	    }
    58	  }
    59	}
    60	
    61	template <typename ItemType>
    62	LinkedStack<ItemType>::~LinkedStack() {
    63	
    64	  while (!isEmpty() ) {
    65	    pop();
    66	  }
    67	}
    68	
    69	template <typename ItemType>
    70	bool LinkedStack<ItemType>::isEmpty() const {
    71	
    72	  return !topPtr;
    73	}
    74	
    75	template <typename ItemType>
    76	bool LinkedStack<ItemType>::push(const ItemType& newItem) {
    77	  
    78	  bool canPush(true);
    79	
    80	  try {
    81	    topPtr = std::make_shared<Node<ItemType>>(newItem,
    82						      topPtr);
    83	    
    84	    //new Node<ItemType>(newItem,
    85	      //topPtr);
    86	  }
    87	  catch (const std::bad_alloc&) {
    88	    canPush = false;
    89	  }
    90	
    91	  return canPush;
    92	}
    93	
    94	template <typename ItemType>
    95	bool LinkedStack<ItemType>::pop() {
    96	
    97	  bool canPop(!isEmpty() );
    98	
    99	  if (canPop) {
   100	    auto nodeToDeletePtr(topPtr);
   101	
   102	    topPtr = topPtr->getNext();
   103	
   104	    //delete nodeToDeletePtr;
   105	  }
   106	
   107	  return canPop;
   108	}
   109	
   110	template <typename ItemType>
   111	ItemType LinkedStack<ItemType>::peek() const {
   112	  //   throw(PrecondViolatedExcep) {
   113	
   114	  if (isEmpty() ) {
   115	    std::string message("LinkedStack::peek() ");
   116	    message += "called on an empty stack.";
   117	
   118	    throw PrecondViolatedExcep(message);
   119	  }
   120	
   121	  return topPtr->getItem();
   122	}
   123	
[4makka[24m:[1m~/cs1521/labs/lab5[0m% cat -n LinkedStack.cpp[K[K[K[K[K[K[K[K[K[K[K[K[K[K[KisPal
isPalindrome.cpp~  isPalindrome.cpp   isPalindrome.h     
[4makka[24m:[1m~/cs1521/labs/lab5[0m% cat -n isPalindrome.cpp
     1	#include <iostream>
     2	#include <string>
     3	using namespace std;
     4	
     5	#include "isPalindrome.h"
     6	#include "LinkedStack.h"
     7	#include "LinkedQueue.h"
     8	
     9	bool isPalindrome(const string& word){
    10	
    11	  LinkedStack<char> stack;
    12	  LinkedQueue<char> queue;
    13	
    14	  for(char ch:word){
    15	    stack.push(ch);
    16	    queue.enqueue(ch);
    17	  }
    18	
    19	  while(!stack.isEmpty() && !queue.isEmpty()){
    20	    if(stack.peek() != queue.peekFront()) return false;
    21	    stack.pop();
    22	    queue.dequeue();
    23	  }
    24	  
    25	  return true;
    26	}
[4makka[24m:[1m~/cs1521/labs/lab5[0m% cd build
[4makka[24m:[1m~/cs1521/labs/lab5/build[0m% make
[ 25%] [32mBuilding CXX object CMakeFiles/lab5.dir/main.cpp.o[0m
[ 50%] [32mBuilding CXX object CMakeFiles/lab5.dir/isPalindrome.cpp.o[0m
[ 75%] [32mBuilding CXX object CMakeFiles/lab5.dir/PrecondViolatedExcep.cpp.o[0m
[100%] [32m[1mLinking CXX executable lab5[0m
[100%] Built target lab5
[4makka[24m:[1m~/cs1521/labs/lab5/build[0m% ./p[Klab5 
YES  is a palindrome.
YES a is a palindrome.
YES aba is a palindrome.
YES abba is a palindrome.
YES deleveled is a palindrome.
YES amanaplanacanalpanama is a palindrome.
NO ab is not a palindrome.
NO abbc is not a palindrome.
[4makka[24m:[1m~/cs1521/labs/lab5/build[0m% exit
exit

Script done on Mon 19 Mar 2018 05:00:11 PM CDT
